apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile('com.android.support:appcompat-v7:25.2.0') {
        transitive = true
    }
    testCompile 'junit:junit:4.12'
    //    compile(group: 'com.daya.android', name: 'daya-utils', version: '0.0.1-alpha') {
    //        transitive = true
    //    }
    compile project(':daya-utils')
}

group = 'com.daya.android'
version = VERSION_NAME

bintray {
    user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray.key') ? project.property('bintray.key') : System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']
    configurations = ['archives']

    publish = true

    pkg {
        repo = 'daya-android-library'
        name = 'daya-http'
        userOrg = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/shnoble/daya-android-library'

        version {
            name = VERSION_NAME
            desc = "Daya Android Http Library ${VERSION_NAME}"
            released = new Date()
            vcsTag = VERSION_NAME
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "developer-id"
            name "developer-name"
            email "dev@d.com"
        }
    }

    scm {
        url "https://github.com/yourgithubaccount/example"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            //artifact javadocJar

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            groupId 'com.daya.android'
            artifactId 'daya-http'
            version VERSION_NAME

            pom.withXml {
                def root = asNode()
                root.appendNode('description', "Daya Android Http Library ${VERSION_NAME}")
                root.appendNode('name', 'Daya Android Http Library')
                root.appendNode('url', 'https://github.com/shnoble/daya-android-library')
                root.children().last() + pomConfig

                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group == null || it.version == null || it.name == null || it.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)

                    if (!it.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!it.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}
